package com.healta.model;

import com.healta.model.base.BaseResearchTestgroupData;
import com.healta.util.DateUtil;
import com.healta.vo.ResultVO;
import com.jfinal.ext.kit.DateKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang.StringUtils;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class ResearchTestgroupData extends BaseResearchTestgroupData<ResearchTestgroupData> {
	public static final ResearchTestgroupData dao = new ResearchTestgroupData().dao();
	
	public boolean containsAttr(String attr) {
		return this._getTable().getColumnNameSet().contains(attr);
	}

	public boolean checkPatientid(String patientid,String patientname) {

		boolean ret = false;
		List<Record> recordList = Db.find("select * from research_testgroup_data where patientid=? and deleted = 0",patientid);
		if(!recordList.isEmpty()){
			for (Record record : recordList) {
				if(StringUtils.isNotEmpty(record.getStr("patientname"))){
					ret = !record.getStr("patientname").equals(patientname);
					if(ret){
						return ret;
					}
				}
			}
		}
		return ret;
	}
	
	public String[] getGeneralColumnNames() {
		String[] ret= {"病人编码(patientid)","病人姓名(patientname)","性别(sex)","年龄(age)","年龄单位(age_unit)","出生日期(birthdate)","检查编码(studyid)","检查时间(study_datetime)","设备类型(modality_type)"};
		return ret;
	}
	
	public String[] getGeneralColumns() {
		String[] ret= {"patientid","patientname","sex","age","age_unit","birthdate","studyid","study_datetime","modality_type"};
		return ret;
	}
	
	public Map<Integer,String[]> getGeneralColumnOptions(){
		Map<Integer,String[]> ret=new HashMap<Integer, String[]>();
		ret.put(2, new String[]{"F", "M", "O"});//性别
		ret.put(4, new String[]{"Y", "M", "D"});//年龄单位
		return ret;
	}
	
	public String[] getGeneralDataFormat() {
		String[] ret= {"","","","","","yyyy-mm-dd","","yyyy-mm-dd hh:mm:ss",""};
		return ret;
	}
	
	public ResultVO validateValue(String code,String value) {
		ResultVO vo= new ResultVO();
//		String ret="";
		switch(code) {
			case "patientid":
				if(StrKit.isBlank(value)) {
					vo.setMessage("患者编号不能为空！");
				}
				break;
			case "patientname":
				if(StrKit.isBlank(value)) {
//					ret="姓名不能为空！";
					vo.setMessage("姓名不能为空！");
				}
				break;
			case "sex":
				if(StrKit.isBlank(value)) {
//					ret="性别不能为空！";
					vo.setMessage("性别不能为空！");
				} else if(!"F".equals(value)&&!"M".equals(value)&&!"O".equals(value)&&!"男".equals(value)&&!"女".equals(value)&&!"其他".equals(value)) {
//					ret="性别的取值只能是：F,M,O,男,女,其他";
					vo.setMessage("性别的取值只能是：F,M,O,男,女,其他");
				}
				break;
			case "age":
				if(StrKit.notBlank(value)&&!StringUtils.isNumeric(value)) {
//					ret="年龄只能是数字！";
					vo.setMessage("年龄只能是数字！");
				}
				break;
			case "age_unit":
				if(StrKit.notBlank(value)&&!"Y".equals(value)&&!"M".equals(value)&&!"D".equals(value)) {
//					ret="年龄单位取值只能是：Y,M,D";
					vo.setMessage("年龄单位取值只能是：Y,M,D");
				}
				break;
			case "birthdate":
				if(StrKit.notBlank(value)) {
					try {
//						LocalDate.parse(value, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
						Date bd=DateUtil.getAutoDate(value);
						vo.setData(DateKit.toStr(bd, "yyyy-MM-dd"));
					} catch(Exception e) {
//						ret="出生日期格式错误！格式：yyyy-MM-dd，示例：2018-10-01或2018-1-1或4/13/1988";
						vo.setMessage("出生日期格式错误！格式：yyyy-MM-dd，示例：2018-10-01或2018-1-1或4/13/1988");
					}
				}
				break;
			case "studyid":
				if(StrKit.isBlank(value)) {
//					ret="检查号不能为空！";
					vo.setMessage("检查号不能为空！");
				}
				break;
			case "study_datetime":
				if(StrKit.notBlank(value)) {
					try {
//						LocalDateTime.parse(value, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
						Date date = DateUtil.getAutoDate(value);
						vo.setData(DateKit.toStr(date, "yyyy-MM-dd HH:mm:ss"));
					} catch(Exception e) {
						e.printStackTrace();
//						ret="检查时间格式错误！格式：yyyy-MM-dd HH:mm:ss，示例：2022-10-01 16:04:30或2022-1-1 10:4:30或2022-1-1 10:4";
						vo.setMessage("检查时间格式错误！格式：yyyy-MM-dd HH:mm:ss，示例：2022-10-01 16:04:30或2022-1-1 10:4:30或2022-1-1 10:4");
					}
				}
				break;
		}
		if(StrKit.notBlank(vo.getMessage())) {
			vo.setCode(-1);
		} else {
			vo.setCode(0);
		}
		return vo;
	}
	
	public static void main(String[] args) throws IOException {
//		LocalDate.parse("2022-1-12", DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		LocalDate.parse("2022-1-12", DateTimeFormatter.ISO_LOCAL_DATE);
	}
}
