package com.healta.model;

import java.util.ArrayList;
import java.util.List;

import com.healta.model.base.BaseUser;
import com.healta.util.Digests;
import com.healta.util.EncodeUtils;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	
	private static final long serialVersionUID = -8781209142247805658L;
	public static final String HASH_ALGORITHM = "SHA-1";
	public static final int HASH_INTERATIONS = 1024;
	private static final int SALT_SIZE = 8;
	
	public static final User dao = new User().dao();
	
//	public User findUserByName(String username){
//		return User.dao.findFirst("select * from user where username='"+username+"'");
//	}
	
	public User getByName(String name) {
		return dao.findFirst("select * from users where deleted=0 and username=?", name);
	}
	
	/**
	 * 检测用户名是否被占用	true 已存在；false 不存在
	 * @param name
	 * @param userid
	 * @return
	 */
	public boolean checkName(String name, Integer userid) {
		List<Object> list = new ArrayList<Object>();
		String sql = "select * from users where username=? and deleted = 0";
		list.add(name);
		if(userid!=null) {
			sql+=" and id != ?";
			list.add(userid);
		}
		return User.dao.find(sql, list.toArray()).size()>0;
	}
	
	/**
	 * 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash
	 */
	public void entryptPassword(User user) {
		if(!StrKit.isBlank(user.getPassword())) {
			byte[] salt = Digests.generateSalt(SALT_SIZE);
			user.set("salt", EncodeUtils.hexEncode(salt));
	
			byte[] hashPassword = Digests.sha1(user.getPassword().getBytes(), salt, HASH_INTERATIONS);
			user.set("password", EncodeUtils.hexEncode(hashPassword));
		}
	}
	
	/**
	 * 根据用户ID查询该用户所拥有的权限列表
	 * @param userId
	 * @return
	 */
	public List<String> getAuthoritiesName(Integer userId) {
		String sql = "select (select name from authority where authority.id=role_authority.authority_id) as name from "
				+ "users,userrole,role_authority where users.id=userrole.userid and userrole.roleid=role_authority.role_id and users.id=?;";
					
		return Db.query(sql, userId);
	}
	
	
	/**
	 * 根据用户ID查询该用户所拥有的角色列表
	 * @param userId
	 * @return
	 */
	public List<String> getRolesName(Integer userId) {
		String sql = "select rolename from users,role,userrole where users.id=userrole.userid and role.id=userrole.roleid and users.id=?";
		return Db.query(sql, userId);
	}
	/**
	  *  加密密码
	  * @param password
	  * @param salt
	  * @return
	  */
	 public String entryptPassword(String password, byte[] salt) {
	     byte[] hashPassword = Digests.sha1(password.getBytes(), salt, HASH_INTERATIONS);
	     return EncodeUtils.hexEncode(hashPassword);
	 }
	 
	/**
	 * 根据用户ID查询该用户在科研项目中所拥有的权限列表
	 * @param userId
	 * @param projectid 
	 * @return
	 */
	public List<String> getAuthoritiesNameProject(Integer userId,Integer projectid) {
		String sql = "select ra.name from research_user_role rus,research_role_authority rra,research_authority ra "
				+ " where rus.role_id=rra.role_id and rra.authority_id=ra.id and rus.project_id=? and rus.user_id=?";
					
		return Db.query(sql, projectid ,userId);
	}
	
}
